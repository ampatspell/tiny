// Project: <%= project.title %>
// World: <%= world.name %>
// Scenes: <%= scenes.length %>

#include <stddef.h>
#include <stdint.h>
#include <tiny/scene/scene.h>
#include <tiny/scene/layer.h>
#include <tiny/scene/node.h>
#include <avr/pgmspace.h>
#include <globals.h>

<%
scenes.forEach((scene, idx) => scene.index = idx);
%>

namespace Tiny {
  namespace Scenes {

    uint8_t _storage[8192];

    <% scenes.forEach(scene => { %>
      <%= include('scene.cpp', { project, world, scene }) %>
    <% }) %>

    Scene *instantiate(uint8_t index) {
    <% scenes.forEach(scene => { %>
      if(index == <%= scene.index %>) {
        size_t offset = 0;
        uint8_t *storage = _storage;

        <%= scene.className %> *scene = new (storage + offset) <%= scene.className %>(<%= scene.namespace %>::scene);
        offset += sizeof(<%= scene.className %>);

      <% scene.layers.forEach(layer => { %>
        {
          <%= layer.className %> *layer = new (storage + offset) <%= layer.className %>(<%= scene.namespace %>::<%= layer.variable %>);
          offset += sizeof(<%= layer.className %>);
          scene->registerLayer(layer);
          {
            <% layer.nodes.forEach(node => { %>
              {
                <%= node.className %> *node = new (storage + offset) <%= node.className %>(<%= scene.namespace %>::<%= node.variable %>);
                offset += sizeof(<%= node.className %>);
                layer->registerNode(node);
              }
            <% }) %>
          }
        }
      <% }); %>

        return scene;
      }
    <% }); %>
      return nullptr;
    }

  }
}
